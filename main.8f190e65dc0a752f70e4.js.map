{"version":3,"sources":["webpack:///./index.js"],"names":["makeTransaction","transaction","Promise","resolve","reject","min","max","delay","Math","floor","random","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"0HAyDQA,EAAkB,SAACC,GACvB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAN6BC,EAAKC,EAM5BC,GANuBF,EAMW,IANNC,EAMY,IALzCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAMlDM,YAAW,WACUH,KAAKE,SAAW,IAGjCP,EAAQ,CAAES,GAAIX,EAAYW,GAAIC,KAAMN,IAEtCH,EAAOH,EAAYW,MAClBL,OAIDO,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACxBE,QAAQC,IAAR,eAA2BJ,EAA3B,iBAA8CC,EAA9C,OAGII,EAAW,SAACL,GAChBG,QAAQG,KAAR,gCAA6CN,EAA7C,8BAGFZ,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAE/DjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,K","file":"main.8f190e65dc0a752f70e4.js","sourcesContent":["// import './styles.css';\r\n\r\n//task-1\r\n\r\n\r\n// const delay = (ms) => {\r\n//     return new Promise((resolve) => {\r\n//       setTimeout(() => {\r\n//         resolve(ms);\r\n//       }, ms);\r\n//     });\r\n//     // Твой код\r\n//   };\r\n  \r\n//   const logger = (time) => console.log(`Resolved after ${time}ms`);\r\n  \r\n//   // Вызовы функции для проверки\r\n//   delay(2000).then(logger); // Resolved after 2000ms\r\n//   delay(1000).then(logger); // Resolved after 1000ms\r\n//   delay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n// task-2\r\n\r\n\r\n// const users = [\r\n//     { name: \"Mango\", active: true },\r\n//     { name: \"Poly\", active: false },\r\n//     { name: \"Ajax\", active: true },\r\n//     { name: \"Lux\", active: false },\r\n//   ];\r\n  \r\n//   const toggleUserState = (allUsers, userName) => {\r\n//     const promise = new Promise((resolve) => {\r\n//       setTimeout(() => {\r\n//         const updatedUsers = allUsers.map((user) =>\r\n//           user.name === userName ? { ...user, active: !user.active } : user\r\n//         );\r\n//         resolve(updatedUsers);\r\n//       }, 2000);\r\n//     });\r\n//     return promise;\r\n//   };\r\n  \r\n//   const logger = (updatedUsers) => console.table(updatedUsers);\r\n  \r\n//   toggleUserState(users, \"Mango\").then(logger);\r\n//   toggleUserState(users, \"Lux\").then(logger);\r\n\r\n\r\n// task-3\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(2000, 5000);\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n  \r\n        if (canProcess) {\r\n          resolve({ id: transaction.id, time: delay });\r\n        }\r\n        reject(transaction.id);\r\n      }, delay);\r\n    });\r\n  };\r\n  \r\n  const logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = (id) => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}